/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*
 * Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of Taproot.
 *
 * Taproot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Taproot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Taproot.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once
#include <cstdint>
#include "tap/communication/gpio/pwm.hpp"
#include <tap/control/subsystem.hpp>
#include "drivers.hpp"

namespace controll::flyWheel {
    class FlyWheelSubsystem : public tap::control::Subsystem {
        public:
            FlyWheelSubsystem(
            src::Drivers& drivers,
            tap::gpio::Pwm *pwmController, 
            tap::gpio::Pwm::Pin leftFlyWheel, 
            tap::gpio::Pwm::Pin rightFlyWheel);

            void setMaxOutput();

            //the output will be -1 to 1 but will have to look at manual to see at 
            //what duty cycle and frequency the motor controller or motor can operate at
            void setOutput(float output);

            void initialize();
                
            void refresh() override;

            const char* getName() override { return "FlyWheels"; }
        
        private:

        #define MAXWheelSpeed
        
        tap::gpio::Pwm *pwmController;
        tap::gpio::Pwm::Pin leftFlyWheel;
        tap::gpio::Pwm::Pin rightFlyWheel;
    };  // namespace flyWheel
}  // namespace tap


